import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { BatchService } from '../../core/services/batch.service';
import { UserService } from '../../user-management/services/user.service';
import { Batch, BatchType, CertificateType } from '../../core/models/batch.model';
import { AuthService } from '../../shared/services/auth.service';

@Component({
  standalone: false,
  selector: 'app-batch-form',
  templateUrl: './batch-form.component.html',
  styleUrls: ['./batch-form.component.scss']
})
export class BatchFormComponent implements OnInit {
  batchForm: FormGroup;
  isEditMode = false;
  batchId: string | null = null;
  isLoading = false;
  canManualOverride = false;

  batchTypes: BatchType[] = [BatchType.Onsite, BatchType.Hybrid, BatchType.Online];
  certificateTypes: CertificateType[] = [CertificateType.FireSafety, CertificateType.WaterSafety];
  instructors: any[] = [];

  constructor(
    private fb: FormBuilder,
    private batchService: BatchService,
    private userService: UserService,
    private authService: AuthService,
    private router: Router,
    private route: ActivatedRoute
  ) {
    this.batchForm = this.fb.group({
      companyName: ['', [Validators.required, Validators.minLength(2)]],
      referredBy: ['', [Validators.required, Validators.minLength(2)]],
      numberOfParticipants: [1, [Validators.required, Validators.min(1), Validators.max(100)]],
      batchType: ['Onsite', Validators.required],
      certificateType: ['Fire & Safety', Validators.required],
      startDate: ['', Validators.required],
      endDate: ['', Validators.required],
      instructorId: ['', Validators.required],
      description: [''],
      batchNumber: [{ value: '', disabled: true }] // Auto-generated by default
    });

    // Check if user can manually override batch numbers
    const currentUser = this.authService.getCurrentUser();
    this.canManualOverride = currentUser?.role === 'Admin' || currentUser?.role === 'Supervisor';
  }

  ngOnInit() {
    this.batchId = this.route.snapshot.paramMap.get('id');
    this.isEditMode = !!this.batchId;

    if (this.isEditMode) {
      this.loadBatch();
    }

    this.loadInstructors();

    if (this.canManualOverride) {
      this.batchForm.get('batchNumber')?.enable();
    }
  }

  private loadInstructors(): void {
    this.userService.getInstructors().subscribe({
      next: (instructors) => {
        this.instructors = instructors;
      },
      error: (error) => {
        console.error('Error loading instructors:', error);
      }
    });
  }

  private loadBatch() {
    if (this.batchId) {
      this.batchService.getBatchByIdFromApi(this.batchId).subscribe({
        next: (batch) => {
          this.batchForm.patchValue({
            companyName: batch.company_name,
            referredBy: batch.referred_by,
            numberOfParticipants: batch.number_of_participants,
            batchType: batch.batch_type,
            certificateType: batch.certificate_type,
            startDate: batch.start_date,
            endDate: batch.end_date,
            instructorId: batch.instructor_id,
            description: batch.description,
            batchNumber: batch.batch_number
          });
        },
        error: (error) => {
          console.error('Error loading batch:', error);
          this.router.navigate(['/dashboard/batches']);
        }
      });
    }
  }

  onSubmit() {
    if (this.batchForm.valid) {
      this.isLoading = true;

      const formValue = this.batchForm.value;

      // Validate date range
      if (formValue.startDate >= formValue.endDate) {
        alert('End date must be after start date!');
        this.isLoading = false;
        return;
      }

      const saveOperation = this.isEditMode && this.batchId
        ? this.batchService.updateBatch(this.batchId, formValue)
        : this.batchService.createBatch(formValue);

      saveOperation.subscribe({
        next: () => {
          this.router.navigate(['/dashboard/batches']);
        },
        error: (error) => {
          console.error('Error saving batch:', error);
          alert('An error occurred while saving the batch.');
          this.isLoading = false;
        }
      });
    }
  }

  cancel() {
    this.router.navigate(['/dashboard/batches']);
  }

  get title(): string {
    return this.isEditMode ? 'Edit Batch' : 'Create New Batch';
  }
}