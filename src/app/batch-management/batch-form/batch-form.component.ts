import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { BatchService } from '../../core/services/batch.service';
import { UserService } from '../../user-management/services/user.service';
import { Batch, BatchType, CertificateType, CreateBatchRequest, UpdateBatchRequest } from '../../shared/models/batch.model';
import { User } from '../../shared/models/user.model';
import { AuthService } from '../../shared/services/auth.service';
import { MiscellaneousGroup } from '../../miscellaneous/models/miscellaneous.model';
import { MiscellaneousService } from '../../miscellaneous/services/miscellaneous.service';
import { StorageService } from '../../shared/services/storage.service';
import { NotificationService } from '../../shared/services/notification.service';

@Component({
  standalone: false,
  selector: 'app-batch-form',
  templateUrl: './batch-form.component.html',
  styleUrls: ['./batch-form.component.scss']
})
export class BatchFormComponent implements OnInit {
  batchForm: FormGroup;
  isEditMode = false;
  batchId: string | null = null;
  isLoading = false;
  canManualOverride = false;

  instructors: User[] = [];
  // batchTypes: MiscellaneousGroup[] = [];
  // certificateTypes: MiscellaneousGroup[] = [];
  // certTrainings: MiscellaneousGroup[] = [];
  sub1$: any;
  sub2$: any;
  sub3$: any;
  constructor(
    private fb: FormBuilder,
    private batchService: BatchService,
    private userService: UserService,
    private authService: AuthService,
    private router: Router,
    private route: ActivatedRoute,
    public storageSvc: StorageService,
    private notificationService: NotificationService
  ) {
    storageSvc.loadCertTrainings();
    storageSvc.loadBatchTypes();
    storageSvc.loadCertificateTypes();
    // Ensure trainings, batch types, and certificate types are loaded
    this.batchForm = this.fb.group({
      company_name: ['', [Validators.required, Validators.minLength(2)]],
      referred_by: ['', [Validators.required, Validators.minLength(2)]],
      number_of_participants: [1, [Validators.required, Validators.min(1), Validators.max(100)]],
      batch_type: [BatchType.ONSITE, Validators.required],
      certificate_type: [CertificateType.FIRE_SAFETY, Validators.required],
      start_date: ['', Validators.required],
      end_date: ['', Validators.required],
      instructor_id: ['', Validators.required],
      description: [''],
      training_code: [''],
      batch_number: [{ value: '', disabled: true }] // Auto-generated by default
    });

    // this.sub1$ = this.miscService.getRecordsByGroup('CTP').subscribe(res => {
    //   if (res) {
    //     this.certTrainings = res;
    //   }
    // });
    // this.sub2$ = this.miscService.getRecordsByGroup('BT').subscribe(res => {
    //   if (res) {
    //     this.batchTypes = res;
    //   }
    // });
    // this.sub3$ = this.miscService.getRecordsByGroup('CT').subscribe(res => {
    //   if (res) {
    //     this.certificateTypes = res;
    //   }
    // });
    // Check if user can manually override batch numbers
    const currentUser = this.authService.getCurrentUser();
    this.canManualOverride = currentUser?.role === 'Admin' || currentUser?.role === 'Supervisor';
  }

  ngOnInit() {
    this.batchId = this.route.snapshot.paramMap.get('id');
    this.isEditMode = !!this.batchId;

    if (this.isEditMode) {
      this.loadBatch();
    }

    this.loadInstructors();

    if (this.canManualOverride) {
      this.batchForm.get('batch_number')?.enable();
    }
  }

  private loadInstructors(): void {
    this.userService.getInstructors().subscribe({
      next: (instructors) => {
        this.instructors = instructors;
      },
      error: (error) => {
        console.error('Error loading instructors:', error);
      }
    });
  }

  private loadBatch() {
    if (this.batchId) {
      this.batchService.getBatchByIdFromApi(this.batchId).subscribe({
        next: (batch) => {
          this.batchForm.patchValue({
            company_name: batch.company_name,
            referred_by: batch.referred_by,
            number_of_participants: batch.number_of_participants,
            batch_type: batch.batch_type,
            certificate_type: batch.certificate_type,
            start_date: batch.start_date,
            end_date: batch.end_date,
            instructor_id: batch.instructor_id,
            description: batch.description,
            training_code: batch.training_code,
            batch_number: batch.batch_number
          });
        },
        error: (error) => {
          console.error('Error loading batch:', error);
          this.router.navigate(['/dashboard/batches']);
        }
      });
    }
  }

  onSubmit() {
    if (this.batchForm.valid) {
      this.isLoading = true;

      const formValue = this.batchForm.value;

      // Validate date range
      if (new Date(formValue.start_date) > new Date(formValue.end_date)) {
        this.notificationService.error('End date must be after start date!');
        this.isLoading = false;
        return;
      }

      if (this.isEditMode && this.batchId) {
        const updateRequest: UpdateBatchRequest = {
          company_name: formValue.company_name,
          referred_by: formValue.referred_by,
          number_of_participants: formValue.number_of_participants,
          batch_type: formValue.batch_type,
          certificate_type: formValue.certificate_type,
          start_date: formValue.start_date,
          end_date: formValue.end_date,
          instructor_id: formValue.instructor_id,
          description: formValue.description,
          training_code: formValue.training_code
        };

        this.batchService.updateBatch(this.batchId, updateRequest)
          .subscribe({
            next: () => {
              this.router.navigate(['/dashboard/batches']);
            },
            error: (error) => {
              console.error('Error updating batch:', error);
              this.isLoading = false;
            }
          });
      }
      else {
        const createRequest: CreateBatchRequest = {
          company_name: formValue.company_name,
          referred_by: formValue.referred_by,
          number_of_participants: formValue.number_of_participants,
          batch_type: formValue.batch_type,
          certificate_type: formValue.certificate_type,
          start_date: formValue.start_date,
          end_date: formValue.end_date,
          instructor_id: formValue.instructor_id,
          description: formValue.description,
          training_code: formValue.training_code
        };

        if (this.canManualOverride && formValue.batch_number) {
          createRequest.batch_number = formValue.batch_number;
        }

        this.batchService.createBatch(createRequest).subscribe({
          next: () => {
            this.router.navigate(['/dashboard/batches']);
          },
          error: (error) => {
            console.error('Error creating batch:', error);
            this.isLoading = false;
          }
        });
      }
    }
  }

  cancel() {
    this.router.navigate(['/dashboard/batches']);
  }

  get title(): string {
    return this.isEditMode ? 'Edit Batch' : 'Create New Batch';
  }
}