import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { BatchService } from '../../core/services/batch.service';
import { UserService } from '../../user-management/services/user.service';
import { AuthService } from '../../core/services/auth.service';
import { Batch, BatchType, CertificateType } from '../../core/models/batch.model';

@Component({
  standalone: false,
  selector: 'app-batch-form',
  templateUrl: './batch-form.component.html',
  styleUrls: ['./batch-form.component.scss']
})
export class BatchFormComponent implements OnInit {
  batchForm: FormGroup;
  isEditMode = false;
  batchId: string | null = null;
  isLoading = false;
  canManualOverride = false;

  batchTypes: BatchType[] = ['Onsite', 'Hybrid', 'Online'];
  certificateTypes: CertificateType[] = ['Fire & Safety', 'Water Safety'];
  instructors = this.userService.users().filter(u => u.role === 'Instructor' && u.isActive);

  constructor(
    private fb: FormBuilder,
    private batchService: BatchService,
    private userService: UserService,
    private authService: AuthService,
    private router: Router,
    private route: ActivatedRoute
  ) {
    this.batchForm = this.fb.group({
      companyName: ['', [Validators.required, Validators.minLength(2)]],
      referredBy: ['', [Validators.required, Validators.minLength(2)]],
      numberOfParticipants: [1, [Validators.required, Validators.min(1), Validators.max(100)]],
      batchType: ['Onsite', Validators.required],
      certificateType: ['Fire & Safety', Validators.required],
      startDate: ['', Validators.required],
      endDate: ['', Validators.required],
      instructorId: ['', Validators.required],
      description: [''],
      batchNumber: [{ value: '', disabled: true }] // Auto-generated by default
    });

    // Check if user can manually override batch numbers
    const currentUser = this.authService.currentUser();
    this.canManualOverride = currentUser?.role === 'Admin' || currentUser?.role === 'Supervisor';
  }

  ngOnInit() {
    this.batchId = this.route.snapshot.paramMap.get('id');
    this.isEditMode = !!this.batchId;

    if (this.isEditMode) {
      this.loadBatch();
    }

    if (this.canManualOverride) {
      this.batchForm.get('batchNumber')?.enable();
    }
  }

  private loadBatch() {
    if (this.batchId) {
      const batch = this.batchService.getBatchById(this.batchId);
      if (batch) {
        this.batchForm.patchValue({
          companyName: batch.companyName,
          referredBy: batch.referredBy,
          numberOfParticipants: batch.numberOfParticipants,
          batchType: batch.batchType,
          certificateType: batch.certificateType,
          startDate: batch.startDate,
          endDate: batch.endDate,
          instructorId: batch.instructorId,
          description: batch.description,
          batchNumber: batch.batchNumber
        });
      }
    }
  }

  async onSubmit() {
    if (this.batchForm.valid) {
      this.isLoading = true;

      try {
        const formValue = this.batchForm.value;

        // Validate date range
        if (formValue.startDate >= formValue.endDate) {
          alert('End date must be after start date!');
          this.isLoading = false;
          return;
        }

        if (this.isEditMode && this.batchId) {
          await this.batchService.updateBatch(this.batchId, formValue);
        } else {
          await this.batchService.createBatch(formValue);
        }

        this.router.navigate(['/dashboard/batches']);
      } catch (error) {
        alert('An error occurred while saving the batch.');
      } finally {
        this.isLoading = false;
      }
    }
  }

  cancel() {
    this.router.navigate(['/dashboard/batches']);
  }

  get title(): string {
    return this.isEditMode ? 'Edit Batch' : 'Create New Batch';
  }
}